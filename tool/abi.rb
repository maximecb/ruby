#!/usr/bin/env ruby

class ABI
  IGNORED_PATTERNS = [
    /include\/ruby\/internal\/abi.h\z/,
    /include\/ruby-.+\/.+\/rb_mjit_min_header-.*\.h\z/,
  ]

  def initialize(srcdir:, arch_hdrdir:)
    @srcdir = srcdir
    @arch_hdrdir = arch_hdrdir
    @output_file = "#{@srcdir}/include/ruby/internal/abi.h"
  end

  attr_reader :output_file

  def version
    begin
      require "digest"
    rescue LoadError
      return 0
    end
    d = Digest::MD5.new

    # Generate MD5 for every header file
    md5s = header_files.map { |file| d.file(file) }

    upper, lower = d.digest.unpack("Q>*")
    upper ^ lower
  end

  private

  def skip_file?(file)
    IGNORED_PATTERNS.any? { |r| r =~ file }
  end

  def header_files
    files = Dir["#{@srcdir}/include/**/*.h"]
    # Include config.h generated by autoconf
    files << "#{@arch_hdrdir}/ruby/config.h"
    files.map! { |f| File.expand_path(f) }
    files.reject! { |f| skip_file?(f) }
    files.sort!
    files
  end
end

# Run only if file was directly called
if __FILE__ == $0
  require "optparse"
  require_relative "lib/colorize"

  OptionParser.new do |opts|
    opts.on("--srcdir=PATH", "use PATH as source directory") do |srcdir|
      @srcdir = srcdir
    end

    opts.on("--arch_hdrdir=PATH", "use PATH as arch_hdrdir") do |arch_hdrdir|
      @arch_hdrdir = arch_hdrdir
    end
  end.parse!

  abi = ABI.new(srcdir: @srcdir, arch_hdrdir: @arch_hdrdir)
  color = Colorize.new(color)
  updated = color.fail("updated")

  abi_h = <<-C
#ifndef RUBY_ABI_H
#define RUBY_ABI_H

// DO NOT MODIFY THIS FILE DIRECTLY
// This file was automatically generated by tool/abi.rb

#ifdef HAVE_FUNC_WEAK

RUBY_FUNC_EXPORTED unsigned long long __attribute__((weak))
ruby_abi_version(void)
{
    return #{abi.version}U;
}

#endif

#endif
  C

  # Update if changed or doesn't exist
  if !File.exist?(abi.output_file) || File.read(abi.output_file) != abi_h
    File.write(abi.output_file, abi_h)

    puts "#{abi.output_file} #{updated}"
  end
end
