#!/usr/bin/env ruby

class ABI
  def initialize(srcdir)
    @srcdir = srcdir
    @output_file = "#{@srcdir}/include/ruby/internal/abi.h"
  end

  attr_reader :output_file

  def version
    begin
      require "digest"
    rescue LoadError
      return 0
    end
    d = Digest::MD5.new

    # Generate MD5 for every header file
    header_files = Dir["#{@srcdir}/include/**/*.h"].reject { |f| f == output_file }
    header_files.sort!
    md5s = header_files.map { |file| d.file(file) }

    upper, lower = d.digest.unpack("Q>*")
    upper ^ lower
  end
end

# Run only if file was directly called
if __FILE__ == $0
  require "optparse"
  require_relative "lib/colorize"

  OptionParser.new do |opts|
    opts.on("--srcdir=PATH", "use PATH as source directory") do |srcdir|
      @srcdir = srcdir
    end
  end.parse!

  abi = ABI.new(@srcdir)
  color = Colorize.new(color)
  updated = color.fail("updated")

  abi_h = <<-C
  #ifndef RUBY_ABI_H
  #define RUBY_ABI_H

  // DO NOT MODIFY THIS FILE DIRECTLY
  // This file was automatically generated by tool/abi.rb

  #define RUBY_ABI_VERSION #{abi.version}

  unsigned long long
  __attribute__((weak))
  ruby_abi_version(void)
  {
      return #{abi.version}U;
  }

  #endif
  C

  # Update if changed or doesn't exist
  if !File.exist?(abi.output_file) || File.read(abi.output_file) != abi_h
    File.write(abi.output_file, abi_h)

    puts "#{abi.output_file} #{updated}"
  end
end
